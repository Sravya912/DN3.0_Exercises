Explain different sorting algorithms (Bubble Sort, Insertion Sort, Quick Sort, Merge Sort).
Bubble Sort:
Bubble Sort is a simple comparison-based sorting algorithm. It repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. This process is repeated until the list is sorted.
Time Complexity:
Best Case: O(n) (when the list is already sorted)
Average Case: O(n²)
Worst Case: O(n²)
Space Complexity: O(1)
 
Insertion Sort:
Description: Insertion Sort builds the sorted array one item at a time. It takes each element and inserts it into its correct position in the already sorted part of the array.
Time Complexity:
Best Case: O(n) (when the list is already sorted)
Average Case: O(n²)
Worst Case: O(n²)
Space Complexity: O(1) 

Quick Sort:
Description: Quick Sort is a divide-and-conquer algorithm. It selects a 'pivot' element from the array and partitions the other elements into two sub-arrays according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively.
Time Complexity:
Best Case: O(n log n) 
Average Case: O(n log n)
Worst Case: O(n²) 
Space Complexity: O(log n) 

Merge Sort:
Description: Merge Sort is also a divide-and-conquer algorithm. It divides the array into two halves, sorts each half, and then merges the two sorted halves into a single sorted array.
Time Complexity: O(n log n) (best, average, and worst)
Space Complexity: O(n)

Compare the performance (time complexity) of Bubble Sort and Quick Sort.
Bubble Sort:
Best Case: O(n) 
Average Case: O(n²)
Worst Case: O(n²)
The high time complexity arises because Bubble Sort requires repeated passes through the array, swapping adjacent elements.

Quick Sort:
Best Case: O(n log n)
Average Case: O(n log n)
Worst Case: O(n²) 
Despite the worst-case scenario, Quick Sort is generally faster than Bubble Sort due to its divide-and-conquer approach, which efficiently reduces the problem size at each step.


Discuss why Quick Sort is generally preferred over Bubble Sort.
Quick Sort is more efficient than Bubble Sort for large datasets due to its average time complexity of O(n log n) and fewer comparisons and swaps. Additionally, it is space-efficient as it can be implemented in-place with minimal additional stack space.